#version 420 core

#extension GL_ARB_compute_shader               : require
#extension GL_ARB_shader_storage_buffer_object : require
#extension GL_ARB_compute_variable_group_size  : require

//  SPDX-License-Identifier: Apache-2.0
//
//  Copyright (c) 2023 onox <denkpadje@gmail.com>
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

layout(local_size_variable) in;
// Should be a power of two

layout(std430, binding = 0) readonly restrict buffer inputBuffer {
    %DATA_TYPE% inputs[];
};

layout(std430, binding = 1) writeonly restrict buffer outputBuffer {
    %DATA_TYPE% outputs[];
};

layout(std430, binding = 2) readonly restrict buffer constantsBuffer {
    %DATA_TYPE% constants[];
};

uniform %DATA_TYPE% identity_value;

shared %DATA_TYPE% data[%LOCAL_GROUP_SIZE%];

void main(void) {
    const uint gid = gl_GlobalInvocationID.x;
    const uint tid = gl_LocalInvocationID.x;

    const uint count = uint(inputs.length());

    if (gid < count) {
        data[tid] = inputs[gid];
    }
    else {
        data[tid] = identity_value;
    }
    groupMemoryBarrier();
    barrier();

    for (uint stride = gl_LocalGroupSizeARB.x / 2u; stride > 0u; stride >>= 1u) {
        if (tid < stride) {
            %DATA_TYPE% left = data[tid];
            %DATA_TYPE% right = data[tid + stride];
            %DATA_TYPE% value;
            %OPERATIONS%
            data[tid] = value;
        }
        groupMemoryBarrier();
        barrier();
    }

    if (tid == 0u) {
        outputs[gl_WorkGroupID.x] = data[0];
    }
}
