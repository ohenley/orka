#version 420 core

#extension GL_ARB_compute_shader               : require
#extension GL_ARB_shader_storage_buffer_object : require

//  SPDX-License-Identifier: Apache-2.0
//
//  Copyright (c) 2023 onox <denkpadje@gmail.com>
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

layout(local_size_x = 256) in;

uniform uvec4 shape; // target
uniform uint count; // source/target

layout(std430, binding = 0) restrict buffer dataBuffer {
    %DATA_TYPE% data[];
} buffers[2];
// source is 2-D, target is 2-D

void main(void) {
    const uint gid = gl_GlobalInvocationID.x;
    const uvec4 target = shape;

    if (gid < count) {
        const uint column = uint(floor(gid / target.x));
        const uint row = uint(mod(gid, target.x));

        const uint index = row * target.y + column;
        buffers[1].data[index] = buffers[0].data[gid];
    }
}
