#version 420 core

#extension GL_ARB_compute_shader               : require
#extension GL_ARB_shader_storage_buffer_object : require

// SPDX-License-Identifier: Apache-2.0
//
// Copyright (c) 2023 onox <denkpadje@gmail.com>
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

layout(local_size_x = 256) in;
// Must be a power of two

uniform bool is_all;

layout(std430, binding = 0) readonly restrict buffer inputBuffer {
    uint inputs[];
};
// source is x-D

layout(std430, binding = 1) restrict buffer outputBuffer {
    uint outputs[];
};
// target is 1-D

shared uint result;

void main(void) {
    const uint gid = gl_GlobalInvocationID.x;
    const uint tid = gl_LocalInvocationID.x;

    const uint count = inputs.length();

    if (gid < count && tid == 0) {
        result = uint(is_all);
        outputs[0] = result;
    }
    groupMemoryBarrier();
    barrier();

    if (gid < count) {
        if (is_all) {
            atomicAnd(result, inputs[gid]);
        }
        else {
            atomicOr(result, inputs[gid]);
        }
    }
    groupMemoryBarrier();
    barrier();

    if (gid < count && tid == 0) {
        if (is_all) {
            atomicAnd(outputs[0], result);
        }
        else {
            atomicOr(outputs[0], result);
        }
    }
}
