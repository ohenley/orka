#version 420 core

#extension GL_ARB_compute_shader : require
#extension GL_ARB_shader_storage_buffer_object : require

//  SPDX-License-Identifier: Apache-2.0
//
//  Copyright (c) 2018 onox <denkpadje@gmail.com>
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

// A compute shader which performs culling of the parts using their
// bounding boxes. The results are written to an array 'visibles'. In
// another shader we then compute its parallel prefix sum [1, 2] to
// compute the indices of the world transforms in the output array
// (stream compaction).
//
// In a third compute shader, these indices are used (if the corresponding
// entries in 'visibles' are true) to write the world transforms to an
// output array in the same order as the input array.

layout(local_size_x = 64) in;

layout(std430, binding = 0) readonly restrict buffer matrixBuffer {
    mat4 matrices[];
};

struct BoundingBox {
    vec4 minimum;
    vec4 maximum;
};

layout(std430, binding = 1) readonly restrict buffer bboxBuffer {
    BoundingBox bboxes[];
};

layout(std430, binding = 2) writeonly restrict buffer outputBuffer {
    uint visibles[];
    // Must be a multiple of four
};

uniform uint instances;
uniform mat4 viewProj;

// Return the position of the nth vertex of the bounding box
vec3 bboxVertex(const in int n, const in vec4 bboxMin, const in vec4 bboxMax) {
    switch (n) {
        case 0:
            // Lower left near
            return vec3(bboxMin.x, bboxMin.y, bboxMin.z);
        case 1:
            // Lower right near
            return vec3(bboxMax.x, bboxMin.y, bboxMin.z);
        case 2:
            // Lower left far
            return vec3(bboxMin.x, bboxMin.y, bboxMax.z);
        case 3:
            // Lower right far
            return vec3(bboxMax.x, bboxMin.y, bboxMax.z);
        case 4:
            // Upper left near
            return vec3(bboxMin.x, bboxMax.y, bboxMin.z);
        case 5:
            // Upper right near
            return vec3(bboxMax.x, bboxMax.y, bboxMin.z);
        case 6:
            // Upper left far
            return vec3(bboxMin.x, bboxMax.y, bboxMax.z);
        case 7:
            // Upper right far
            return vec3(bboxMax.x, bboxMax.y, bboxMax.z);
    }
}

void main(void) {
    const uint gid = gl_GlobalInvocationID.x;
    const uint totalPartsCount = instances * uint(bboxes.length());

    uint isVisible = 0u;

    if (gid < totalPartsCount) {
        const uint part = uint(gid / instances);

        const mat4 world = matrices[gid];
        const mat4 worldViewProj = viewProj * world;

        const vec4 bboxMin = bboxes[part].minimum;
        const vec4 bboxMax = bboxes[part].maximum;

        ivec3 outsideNeg = ivec3(0, 0, 0);
        ivec3 outsidePos = ivec3(0, 0, 0);

        for (int n = 0; n < 8; n++) {
            const vec4 bb = worldViewProj * vec4(bboxVertex(n, bboxMin, bboxMax), 1);

            outsideNeg.x += bb.x < -bb.w ? 1 : 0;
            outsideNeg.y += bb.y < -bb.w ? 1 : 0;
            outsideNeg.z += bb.z < -bb.w ? 1 : 0;

            outsidePos.x += bb.x > bb.w ? 1 : 0;
            outsidePos.y += bb.y > bb.w ? 1 : 0;
            outsidePos.z += bb.z > bb.w ? 1 : 0;
        }

        const bool e1 = all(lessThan(outsideNeg, ivec3(8, 8, 8)));
        const bool e2 = all(lessThan(outsidePos, ivec3(8, 8, 8)));
        isVisible = (e1 && e2) ? 1u : 0u;
    }

    visibles[gid] = isVisible;
}
